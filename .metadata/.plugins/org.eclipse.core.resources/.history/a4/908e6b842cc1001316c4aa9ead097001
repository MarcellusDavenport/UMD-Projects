package student_classes;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListSet;

/**
 * A Binary Search Tree data-structure that maintains a count
 * of repetitive values (as nodes).
 * 
 * @author Marcellus Davenport.
 *
 * @param <T>
 */
public class DenseSearchTree< T extends Comparable<T> > 
					implements Iterable<T> {

	private Node<T> root;
	private int size;
	private Set<T> treeSet = new HashSet<T>();
	
	static class Node<T> {
		T data;
		int count;
		Node<T> leftTree;
		Node<T> rightTree;
		
		public Node(Node<T> leftTree, Node<T> rightTree, T data) {
			this.leftTree = leftTree;
			this.rightTree = rightTree;
			this.data = data;
			this.count = 1;
		}
		
		private T getMax() {
			
			
		}
	}
	
	public DenseSearchTree() { 
		this.root = null;
	}
	/**
	 * Note: our trees follow a slightly different convention regarding 
	 * both our ordering relation and the placement of duplicates, viz:
	 * 
	 * Left branch contains all elements < tree.value;
	 * Right branch contains all elements >= tree.value.
	 * 
	 * Rather than place duplicate elements on the right branch,
	 * each Tree Node maintains a count of copies. For example, 
	 * if we had a tree of Integers containing two instances of the
	 * number 1, our Tree Node would logically appear as 
	 * [ left-branch 1:2 right-branch ], where
	 * 1:2 means 2 copies of the integer 1.
	 * 
	 * Thus, your add logic will either make a new node and insert
	 * it in the correct position in the tree, or it will find a
	 * node with the value (key) equal to the value you are adding,
	 * and increment its count.
	 * 
	 * This simplifies your remove logic: if the node's count
	 * is > 0, then decrement by 1, otherwise invoke the remove
	 * logic to physically remove the node and replace it with a 
	 * Binary Search Tree.
	 * 
	 * Finally, the "price you pay" for this simplification is that
	 * your Iterator (which presents an "in-order" view of the tree),
	 * needs to "inflate" or "expand" each node. That is, if you have
	 * a node 
	 * [ left 3:4 right ]
	 * then 4 instances of the integer 3 need to be created and 
	 * put into the iteration.
	 * 
	 * @param element
	 */
	public void add( T element ) {
		if (this.root == null) {
			root = new Node<T>(null, null, element);
			size++;
			treeSet.add(element);
		} else {
			this.addAux(element, root);
		}
	}
	
	private void addAux(T element, Node<T> currentNode) {
		int toCompare = element.compareTo(currentNode.data);
		if (toCompare == 0) {
			currentNode.count++;
			size++;
			treeSet.add(element);
		} else if (toCompare < 0) {
			if (currentNode.leftTree == null) {
				currentNode.leftTree = new Node<T>(null, null, element);
				size++;
				treeSet.add(element);
			} else {
				addAux(element, currentNode.leftTree);
			}
		} else {
			if (currentNode.rightTree == null) {
				currentNode.rightTree = new Node<T>(null, null, element);
				size++;
				treeSet.add(element);
			} else {
				addAux(element, currentNode.rightTree);
			}
		}
	}
	
	/**
	 * Returns true if at least instance of <code>target</code>
	 * is found in tree.
	 * 
	 * @param target
	 * @return
	 */
	public boolean contains( T target ) {
		if (root == null) {
			return false;
		} else {
			return contains(target, root);
		}
	}
	
	private boolean contains(T target, Node<T> node) {
		int toCompare = target.compareTo(node.data);
		if (toCompare == 0) {
			return true;
		} else if (toCompare < 0) {
			if (node.leftTree == null) {
				return false;
			} else {
				return contains(target, node.leftTree);
			}
		} else {
			if (node.rightTree == null) {
				return false;
			} else {
				return contains(target, node.rightTree);
			}
		}
	}
	
	/**
	 * Returns an int >= 0, indicating how many occurrences
	 * of <code>target</code> reside in the tree. Note, this
	 * function returns 0 when the item is NOT found in tree.
	 * 
	 * @param target
	 * @param tree
	 * @return
	 */
	public int count( T target ) {
		if (root == null) {
			return 0;
		} else {
			return count(target, root);
		}
	}
	
	private int count(T target, Node<T> node) {
		int toCompare = target.compareTo(node.data);
		if (toCompare == 0) {
			return node.count;
		} else if (toCompare < 0) {
			if (node.leftTree == null) {
				return 0;
			} else {
				return count(target, node.leftTree);
			}
		} else {
			if (node.rightTree == null) {
				return 0;
			} else {
				return count(target, node.rightTree);
			}
		}
	}
	
	/**
	 * Returns "inflated" size of tree, meaning a count of
	 * all keys in the tree
	 * @return
	 */
	public int size() {
		return size;
	}
	/**
	 * Returns the set representation of this Tree. In this case,
	 * the set will contain unique elements (i.e., it should omit
	 * multiple instances) that comprise the tree. Depending upon
	 * your internal representation, this may be challenging. If 
	 * you are having trouble, examine the Java online API; look
	 * under Collections. Study the concrete classes that implement
	 * the Set interface ... consider ConcurrentSkipLists ....
	 * @return
	 */
	public Set<T> asSet() {
		return treeSet;
	}
	
	/**
	 * Somewhat streamlined or simplified version of the classic
	 * BST remove algorithm. Because we're maintaining counts of 
	 * keys on each node, many times this method find the node
	 * whose value (key) equals the <code>target</code> and decrements
	 * the counter by 1. If that would result in the counter going to 
	 * 0, however, then the remove logic finds the greatest in order
	 * successor and replaces the node to be removed with that, and 
	 * then continues to remove the in order successor whose value
	 * was used to re-label the node to be removed.
	 * 
	 * @param target
	 */
	public void remove( T target ) {
		if (root != null) {
			remove(target, root);
		} else {
			return;
		}
	}
	
	private void remove(T target, Node<T> node) {
		int toCompare = target.compareTo(node.data);
		if (toCompare == 0) {
			if (node.count != 0) {
				node.count--;
			} else {
				if (node.rightTree == null && node.leftTree == null) {
					node = null;
				} else if (node.rightTree == null) {
					node = node.leftTree;
				} else if (node.leftTree == null) {
					node = node.rightTree;
				} else {
					node.data = node.leftTree.getMax();
					//replace node with max from left subtree
					//find and delete that node
				}
			}
		} else if (toCompare < 0) {
			if (node.leftTree == null) {
				return;
			} else {
				remove(target, node.leftTree);
			}
		} else {
			if (node.rightTree == null) {
				return;
			} else {
				remove(target, node.rightTree);
			}
		}
	}
	
	
	/**
	 * Returns a value of type T or throws an <code>IllegalStateException</code>
	 * if this function is called on an empty tree.
	 * 
	 * @return
	 */
	public T getMin() {
		if (root == null) {
			throw new IllegalStateException();
		} else {
			Node<T> tmp = root;
			while (tmp.leftTree != null) {
				tmp = tmp.leftTree;
			}
			return tmp.data;
		}
	}
	
	/**
	 * Returns the max value (of type T) or throws an 
	 * <code>IllegalStateException</code> if this function
	 * is called on an empty tree.
	 * 
	 * @return
	 */
	public T getMax() {
		if (root == null) {
			throw new IllegalStateException();
		} else {
			Node<T> tmp = root;
			while (tmp.rightTree != null) {
				tmp = tmp.rightTree;
			}
			return tmp.data;
		}
	}
	
	
	public String toString() {
		throw new UnsupportedOperationException("you must implement this method");
	}
	/**
	 * Returns an iterator over the DenseSearchTree. Note, this iterator should
	 * present an "in order" view of the keys in the tree.
	 */
	@Override
	public Iterator<T> iterator() {
		throw new UnsupportedOperationException("you must implement this method");
	}
}

package fighters;

import framework.BattleField;
import framework.Random131;

//Soldier that I created for the homework project
public class BasicSoldier {

	//Initial constant variables
	public final static int INITIAL_HEALTH = 10;
	public final static int ARMOR = 20;
	public final static int STRENGTH = 30;
	public final static int SKILL = 40;
	
	public final static int UP = 0;
	public final static int RIGHT = 1;
	public final static int DOWN = 2;
	public final static int LEFT = 3;
	public final static int UP_AND_RIGHT = 4;
	public final static int DOWN_AND_RIGHT = 5;
	public final static int DOWN_AND_LEFT = 6;
	public final static int UP_AND_LEFT = 7;
	public final static int NEUTRAL = -1;
	
	//Instance variables of the class
	public final BattleField battleField;
	public int row, col;
	public int health; 
	public final int team;
	
	//Constructor which initializes soldiers at the beginning of battle
	public BasicSoldier(BattleField battleFieldIn, int teamIn, int rowIn, int colIn) {
		health = INITIAL_HEALTH;
		team = teamIn;
		battleField = battleFieldIn; 
		row = rowIn;
		col = colIn;		
	}
	
	//Checks if soldier can move
	//If it can, it returns "true". If not, it returns "false"
	public boolean canMove() {
		if ((battleField.get(row - 1, col) == BattleField.EMPTY) || 
		   (battleField.get(row + 1, col) == BattleField.EMPTY) || 
		   (battleField.get(row, col - 1) == BattleField.EMPTY) ||
		   (battleField.get(row, col + 1) == BattleField.EMPTY)) {
			return true;
		} else {
			return false;
		}
	}
	
	//Counts the number of remaining enemies in the battlefield
	public int numberOfEnemiesRemaining() {
		int numEnemies = 0;
		for (int battleRow = 0; battleRow < battleField.getRows(); battleRow++) {
			for (int battleCol = 0; battleCol < battleField.getCols(); battleCol++ ) {
				if ((battleField.get(battleRow,battleCol) == BattleField.RED_TEAM) && (team == BattleField.BLUE_TEAM)) {
					numEnemies++;
				}
				if ((battleField.get(battleRow,battleCol) == BattleField.BLUE_TEAM) && (team == BattleField.RED_TEAM)) {
					numEnemies++;
				}
			}
		}
		return numEnemies;
	}
    
	//Calculates distance between the current soldier and the desired destination
	//Pass in the row and column (integers) of the desired location as arguments to return distance.
	public int getDistance(int destinationRow, int destinationCol) {
		int distanceCol = col - destinationCol;
		int distanceRow = row - destinationRow;
		distanceCol = Math.abs(distanceCol);
		distanceRow = Math.abs(distanceRow);
		int total = distanceCol + distanceRow;
		return total;
	}
	
	//Determines the direction required to access the determined destination
	//Pass in the row and column (integers) of the desired location as arguments to return the direction
	public int getDirection(int destinationRow, int destinationCol) {
		if ((destinationRow > row) && (destinationCol == col)) {
			return DOWN;
		} else if ((destinationRow > row) && (destinationCol > col)) {
			return DOWN_AND_RIGHT;
		} else if ((destinationRow > row) && (destinationCol < col)) {
			return DOWN_AND_LEFT;
		} else if ((destinationRow < row) && (destinationCol == col)) {
			return UP;
		} else if ((destinationRow < row) && (destinationCol > col)) {
			return UP_AND_RIGHT;
		} else if ((destinationRow < row) && (destinationCol < col)) {
			return UP_AND_LEFT;
		} else if ((destinationRow == row) && (destinationCol < col)) {
			return LEFT;
		} else if ((destinationRow == row) && (destinationCol > col)) {
			return RIGHT;
		} else {
			return NEUTRAL;
		}
	}
	
	//Determines direction of nearest friend or teammate
	public int getDirectionOfNearestFriend() {
		int temp = battleField.getRows() + battleField.getCols() ;
		int currentDirection = 22;
		for (int battleRow = 0; battleRow < battleField.getRows(); battleRow++) {
			for (int battleCol = 0; battleCol < battleField.getCols(); battleCol++) {
				if (((battleField.get(battleRow, battleCol) == BattleField.RED_TEAM) && (team == BattleField.RED_TEAM))
				|| ((battleField.get(battleRow, battleCol) == BattleField.BLUE_TEAM) && (team == BattleField.BLUE_TEAM))) {
					if ((getDistance(battleRow, battleCol) < temp) && (getDistance(battleRow, battleCol) > 0)) {
						temp = getDistance(battleRow, battleCol);
						currentDirection = getDirection(battleRow, battleCol);
					}
				}
			}
		}
		if (currentDirection == 22) {
			return NEUTRAL;
		}
		return currentDirection;
	}
	
	//Counts how many friends are in the desired radius
	//
	public int countNearbyFriends(int radius) {
		int counter = 0;
		for (int battleRow = 0; battleRow < battleField.getRows(); battleRow++) {
			for (int battleCol = 0; battleCol < battleField.getCols(); battleCol++) {
				if (((battleField.get(battleRow,battleCol) == BattleField.RED_TEAM) && (team == BattleField.RED_TEAM))
					|| ((battleField.get(battleRow,battleCol) == BattleField.BLUE_TEAM) && (team == BattleField.BLUE_TEAM))) {
						if (getDistance(battleRow, battleCol) > 0) {
							if (getDistance(battleRow,battleCol) <= radius) {
								counter++;
							}
						}
				}
			}
		}
		return counter;
	}

	public int getDirectionOfNearestEnemy(int radius) {
		int temp = 1000;
		int currentDirection = 22;
		for (int battleRow = 0; battleRow < battleField.getRows(); battleRow++) {
			for (int battleCol = 0; battleCol < battleField.getCols(); battleCol++) {
				if (((battleField.get(battleRow,battleCol) == BattleField.RED_TEAM) && (team == BattleField.BLUE_TEAM))
					|| ((battleField.get(battleRow,battleCol) == BattleField.BLUE_TEAM) && (team == BattleField.RED_TEAM))) {
					if (getDistance(battleRow,battleCol) <= radius) {
						if (temp == 1000) {
							temp = getDistance(battleRow, battleCol);
							currentDirection = getDirection(battleRow, battleCol);
						}
						if (getDistance(battleRow, battleCol) < temp) {
							temp = getDistance(battleRow, battleCol);
							currentDirection = getDirection(battleRow, battleCol);
						}
					}
				}
			}
		}
		if (temp == 1000) {
			return NEUTRAL;
		}
		return currentDirection;
	}
	
	public void performMyTurn() {
		if (team == BattleField.RED_TEAM) {
			if (battleField.get(row - 1, col) == BattleField.BLUE_TEAM) {
				battleField.attack(row - 1, col);
			} else if (battleField.get(row + 1, col) == BattleField.BLUE_TEAM) {
				battleField.attack(row + 1, col);
			} else if (battleField.get(row, col - 1) == BattleField.BLUE_TEAM) {
				battleField.attack(row, col - 1);
			} else if (battleField.get(row, col + 1) == BattleField.BLUE_TEAM) {
				battleField.attack(row, col + 1);
			} else if (battleField.get(row - 1, col) == BattleField.EMPTY) {
				row--;
			} else if (battleField.get(row + 1, col) == BattleField.EMPTY) {
				row++;
			} else if (battleField.get(row, col - 1) == BattleField.EMPTY) {
				col--;
			} else if (battleField.get(row, col + 1) == BattleField.EMPTY) {
				col++;
			} else {
				
			}
				
		}
		
		if (team == BattleField.BLUE_TEAM) {
			if (battleField.get(row - 1, col) == BattleField.RED_TEAM) {
				battleField.attack(row - 1, col);
			} else if (battleField.get(row + 1, col) == BattleField.RED_TEAM) {
				battleField.attack(row + 1, col);
			} else if (battleField.get(row, col - 1) == BattleField.RED_TEAM) {
				battleField.attack(row, col - 1);
			} else if (battleField.get(row, col + 1) == BattleField.RED_TEAM) {
				battleField.attack(row, col + 1);
			}else if (battleField.get(row - 1, col) == BattleField.EMPTY) {
				row--;
			} else if (battleField.get(row + 1, col) == BattleField.EMPTY) {
				row++;
			} else if (battleField.get(row, col - 1) == BattleField.EMPTY) {
				col--;
			} else if (battleField.get(row, col + 1) == BattleField.EMPTY) {
				col++;
			} else {
				
			}	
		}
		
	}
	
	

	
}
